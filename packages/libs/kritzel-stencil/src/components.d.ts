/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BrushStyleOption } from "./components/shared/kritzel-brush-style/kritzel-brush-style";
import { ContextMenuItem } from "./interfaces/context-menu-item.interface";
import { KritzelToolbarControl } from "./interfaces/toolbar-control.interface";
import { DropdownOption } from "./components/shared/kritzel-dropdown/kritzel-dropdown";
import { KritzelTool } from "./interfaces/tool.interface";
import { KritzelBaseTool } from "./classes/tools/base-tool.class";
import { FontOption } from "./components/shared/kritzel-font-family/kritzel-font-family";
export { BrushStyleOption } from "./components/shared/kritzel-brush-style/kritzel-brush-style";
export { ContextMenuItem } from "./interfaces/context-menu-item.interface";
export { KritzelToolbarControl } from "./interfaces/toolbar-control.interface";
export { DropdownOption } from "./components/shared/kritzel-dropdown/kritzel-dropdown";
export { KritzelTool } from "./interfaces/tool.interface";
export { KritzelBaseTool } from "./classes/tools/base-tool.class";
export { FontOption } from "./components/shared/kritzel-font-family/kritzel-font-family";
export namespace Components {
    interface KritzelBrushStyle {
        "brushOptions": BrushStyleOption[];
    }
    interface KritzelColor {
        "size": number;
        "value": string;
    }
    interface KritzelColorPalette {
        "colors": string[];
        "isExpanded": boolean;
        "selectedColor": string | null;
    }
    interface KritzelContextMenu {
        "items": ContextMenuItem[];
    }
    interface KritzelControlBrushConfig {
        "activeControl": string;
        "color": string;
        "isExpanded": boolean;
        "size": number;
        "type": string;
    }
    interface KritzelControlTextConfig {
        "activeControl": string;
        "color": string;
        "family": string;
        "isExpanded": boolean;
        "size": number;
    }
    interface KritzelControls {
        "activeControl": string | null;
        "controls": KritzelToolbarControl[];
    }
    interface KritzelCursorTrail {
    }
    interface KritzelDropdown {
        "options": DropdownOption[];
        "selectStyles"?: any;
        "value": string;
        "width"?: string;
    }
    interface KritzelEditor {
        "controls": KritzelToolbarControl[];
        "customSvgIcons": Record<string, string>;
    }
    interface KritzelEngine {
        "activeTool": KritzelTool;
        "changeActiveTool": (tool: string) => Promise<void>;
        "copy": () => Promise<void>;
        "delete": () => Promise<void>;
        "disable": () => Promise<void>;
        "enable": () => Promise<void>;
        "getActiveTool": () => Promise<KritzelBaseTool>;
        "globalContextMenuItems": ContextMenuItem[];
        "moveToBottom": () => Promise<void>;
        "moveToTop": () => Promise<void>;
        "objectContextMenuItems": ContextMenuItem[];
        "paste": (x: number, y: number) => Promise<void>;
        "redo": () => Promise<void>;
        "registerTool": (toolName: string, toolClass: any) => Promise<boolean>;
        "selectAllInViewport": () => Promise<void>;
        "undo": () => Promise<void>;
    }
    interface KritzelFont {
        "color": string;
        "fontFamily": string;
        "size": number;
    }
    interface KritzelFontFamily {
        "fontOptions": FontOption[];
        "selectedFontFamily": string;
    }
    interface KritzelFontSize {
        "fontFamily": string;
        "selectedSize": number | null;
        "sizes": number[];
    }
    interface KritzelIcon {
        "label"?: string;
        "name": string;
        "size": number;
    }
    interface KritzelStrokeSize {
        "selectedSize": number | null;
        "sizes": number[];
    }
}
export interface KritzelColorPaletteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKritzelColorPaletteElement;
}
export interface KritzelContextMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKritzelContextMenuElement;
}
export interface KritzelControlBrushConfigCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKritzelControlBrushConfigElement;
}
export interface KritzelControlTextConfigCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKritzelControlTextConfigElement;
}
export interface KritzelDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKritzelDropdownElement;
}
export interface KritzelEngineCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKritzelEngineElement;
}
export interface KritzelFontFamilyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKritzelFontFamilyElement;
}
export interface KritzelFontSizeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKritzelFontSizeElement;
}
export interface KritzelStrokeSizeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKritzelStrokeSizeElement;
}
declare global {
    interface HTMLKritzelBrushStyleElement extends Components.KritzelBrushStyle, HTMLStencilElement {
    }
    var HTMLKritzelBrushStyleElement: {
        prototype: HTMLKritzelBrushStyleElement;
        new (): HTMLKritzelBrushStyleElement;
    };
    interface HTMLKritzelColorElement extends Components.KritzelColor, HTMLStencilElement {
    }
    var HTMLKritzelColorElement: {
        prototype: HTMLKritzelColorElement;
        new (): HTMLKritzelColorElement;
    };
    interface HTMLKritzelColorPaletteElementEventMap {
        "colorChange": string;
    }
    interface HTMLKritzelColorPaletteElement extends Components.KritzelColorPalette, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKritzelColorPaletteElementEventMap>(type: K, listener: (this: HTMLKritzelColorPaletteElement, ev: KritzelColorPaletteCustomEvent<HTMLKritzelColorPaletteElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKritzelColorPaletteElementEventMap>(type: K, listener: (this: HTMLKritzelColorPaletteElement, ev: KritzelColorPaletteCustomEvent<HTMLKritzelColorPaletteElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKritzelColorPaletteElement: {
        prototype: HTMLKritzelColorPaletteElement;
        new (): HTMLKritzelColorPaletteElement;
    };
    interface HTMLKritzelContextMenuElementEventMap {
        "actionSelected": ContextMenuItem;
    }
    interface HTMLKritzelContextMenuElement extends Components.KritzelContextMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKritzelContextMenuElementEventMap>(type: K, listener: (this: HTMLKritzelContextMenuElement, ev: KritzelContextMenuCustomEvent<HTMLKritzelContextMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKritzelContextMenuElementEventMap>(type: K, listener: (this: HTMLKritzelContextMenuElement, ev: KritzelContextMenuCustomEvent<HTMLKritzelContextMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKritzelContextMenuElement: {
        prototype: HTMLKritzelContextMenuElement;
        new (): HTMLKritzelContextMenuElement;
    };
    interface HTMLKritzelControlBrushConfigElementEventMap {
        "familyChange": string;
        "colorChange": string;
        "sizeChange": number;
    }
    interface HTMLKritzelControlBrushConfigElement extends Components.KritzelControlBrushConfig, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKritzelControlBrushConfigElementEventMap>(type: K, listener: (this: HTMLKritzelControlBrushConfigElement, ev: KritzelControlBrushConfigCustomEvent<HTMLKritzelControlBrushConfigElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKritzelControlBrushConfigElementEventMap>(type: K, listener: (this: HTMLKritzelControlBrushConfigElement, ev: KritzelControlBrushConfigCustomEvent<HTMLKritzelControlBrushConfigElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKritzelControlBrushConfigElement: {
        prototype: HTMLKritzelControlBrushConfigElement;
        new (): HTMLKritzelControlBrushConfigElement;
    };
    interface HTMLKritzelControlTextConfigElementEventMap {
        "familyChange": string;
        "colorChange": string;
        "sizeChange": number;
    }
    interface HTMLKritzelControlTextConfigElement extends Components.KritzelControlTextConfig, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKritzelControlTextConfigElementEventMap>(type: K, listener: (this: HTMLKritzelControlTextConfigElement, ev: KritzelControlTextConfigCustomEvent<HTMLKritzelControlTextConfigElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKritzelControlTextConfigElementEventMap>(type: K, listener: (this: HTMLKritzelControlTextConfigElement, ev: KritzelControlTextConfigCustomEvent<HTMLKritzelControlTextConfigElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKritzelControlTextConfigElement: {
        prototype: HTMLKritzelControlTextConfigElement;
        new (): HTMLKritzelControlTextConfigElement;
    };
    interface HTMLKritzelControlsElement extends Components.KritzelControls, HTMLStencilElement {
    }
    var HTMLKritzelControlsElement: {
        prototype: HTMLKritzelControlsElement;
        new (): HTMLKritzelControlsElement;
    };
    interface HTMLKritzelCursorTrailElement extends Components.KritzelCursorTrail, HTMLStencilElement {
    }
    var HTMLKritzelCursorTrailElement: {
        prototype: HTMLKritzelCursorTrailElement;
        new (): HTMLKritzelCursorTrailElement;
    };
    interface HTMLKritzelDropdownElementEventMap {
        "valueChanged": string;
    }
    interface HTMLKritzelDropdownElement extends Components.KritzelDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKritzelDropdownElementEventMap>(type: K, listener: (this: HTMLKritzelDropdownElement, ev: KritzelDropdownCustomEvent<HTMLKritzelDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKritzelDropdownElementEventMap>(type: K, listener: (this: HTMLKritzelDropdownElement, ev: KritzelDropdownCustomEvent<HTMLKritzelDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKritzelDropdownElement: {
        prototype: HTMLKritzelDropdownElement;
        new (): HTMLKritzelDropdownElement;
    };
    interface HTMLKritzelEditorElement extends Components.KritzelEditor, HTMLStencilElement {
    }
    var HTMLKritzelEditorElement: {
        prototype: HTMLKritzelEditorElement;
        new (): HTMLKritzelEditorElement;
    };
    interface HTMLKritzelEngineElementEventMap {
        "activeToolChange": KritzelTool;
    }
    interface HTMLKritzelEngineElement extends Components.KritzelEngine, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKritzelEngineElementEventMap>(type: K, listener: (this: HTMLKritzelEngineElement, ev: KritzelEngineCustomEvent<HTMLKritzelEngineElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKritzelEngineElementEventMap>(type: K, listener: (this: HTMLKritzelEngineElement, ev: KritzelEngineCustomEvent<HTMLKritzelEngineElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKritzelEngineElement: {
        prototype: HTMLKritzelEngineElement;
        new (): HTMLKritzelEngineElement;
    };
    interface HTMLKritzelFontElement extends Components.KritzelFont, HTMLStencilElement {
    }
    var HTMLKritzelFontElement: {
        prototype: HTMLKritzelFontElement;
        new (): HTMLKritzelFontElement;
    };
    interface HTMLKritzelFontFamilyElementEventMap {
        "fontFamilyChange": string;
    }
    interface HTMLKritzelFontFamilyElement extends Components.KritzelFontFamily, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKritzelFontFamilyElementEventMap>(type: K, listener: (this: HTMLKritzelFontFamilyElement, ev: KritzelFontFamilyCustomEvent<HTMLKritzelFontFamilyElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKritzelFontFamilyElementEventMap>(type: K, listener: (this: HTMLKritzelFontFamilyElement, ev: KritzelFontFamilyCustomEvent<HTMLKritzelFontFamilyElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKritzelFontFamilyElement: {
        prototype: HTMLKritzelFontFamilyElement;
        new (): HTMLKritzelFontFamilyElement;
    };
    interface HTMLKritzelFontSizeElementEventMap {
        "sizeChange": number;
    }
    interface HTMLKritzelFontSizeElement extends Components.KritzelFontSize, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKritzelFontSizeElementEventMap>(type: K, listener: (this: HTMLKritzelFontSizeElement, ev: KritzelFontSizeCustomEvent<HTMLKritzelFontSizeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKritzelFontSizeElementEventMap>(type: K, listener: (this: HTMLKritzelFontSizeElement, ev: KritzelFontSizeCustomEvent<HTMLKritzelFontSizeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKritzelFontSizeElement: {
        prototype: HTMLKritzelFontSizeElement;
        new (): HTMLKritzelFontSizeElement;
    };
    interface HTMLKritzelIconElement extends Components.KritzelIcon, HTMLStencilElement {
    }
    var HTMLKritzelIconElement: {
        prototype: HTMLKritzelIconElement;
        new (): HTMLKritzelIconElement;
    };
    interface HTMLKritzelStrokeSizeElementEventMap {
        "sizeChange": number;
    }
    interface HTMLKritzelStrokeSizeElement extends Components.KritzelStrokeSize, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKritzelStrokeSizeElementEventMap>(type: K, listener: (this: HTMLKritzelStrokeSizeElement, ev: KritzelStrokeSizeCustomEvent<HTMLKritzelStrokeSizeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKritzelStrokeSizeElementEventMap>(type: K, listener: (this: HTMLKritzelStrokeSizeElement, ev: KritzelStrokeSizeCustomEvent<HTMLKritzelStrokeSizeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKritzelStrokeSizeElement: {
        prototype: HTMLKritzelStrokeSizeElement;
        new (): HTMLKritzelStrokeSizeElement;
    };
    interface HTMLElementTagNameMap {
        "kritzel-brush-style": HTMLKritzelBrushStyleElement;
        "kritzel-color": HTMLKritzelColorElement;
        "kritzel-color-palette": HTMLKritzelColorPaletteElement;
        "kritzel-context-menu": HTMLKritzelContextMenuElement;
        "kritzel-control-brush-config": HTMLKritzelControlBrushConfigElement;
        "kritzel-control-text-config": HTMLKritzelControlTextConfigElement;
        "kritzel-controls": HTMLKritzelControlsElement;
        "kritzel-cursor-trail": HTMLKritzelCursorTrailElement;
        "kritzel-dropdown": HTMLKritzelDropdownElement;
        "kritzel-editor": HTMLKritzelEditorElement;
        "kritzel-engine": HTMLKritzelEngineElement;
        "kritzel-font": HTMLKritzelFontElement;
        "kritzel-font-family": HTMLKritzelFontFamilyElement;
        "kritzel-font-size": HTMLKritzelFontSizeElement;
        "kritzel-icon": HTMLKritzelIconElement;
        "kritzel-stroke-size": HTMLKritzelStrokeSizeElement;
    }
}
declare namespace LocalJSX {
    interface KritzelBrushStyle {
        "brushOptions"?: BrushStyleOption[];
    }
    interface KritzelColor {
        "size"?: number;
        "value"?: string;
    }
    interface KritzelColorPalette {
        "colors"?: string[];
        "isExpanded"?: boolean;
        "onColorChange"?: (event: KritzelColorPaletteCustomEvent<string>) => void;
        "selectedColor"?: string | null;
    }
    interface KritzelContextMenu {
        "items"?: ContextMenuItem[];
        "onActionSelected"?: (event: KritzelContextMenuCustomEvent<ContextMenuItem>) => void;
    }
    interface KritzelControlBrushConfig {
        "activeControl"?: string;
        "color"?: string;
        "isExpanded"?: boolean;
        "onColorChange"?: (event: KritzelControlBrushConfigCustomEvent<string>) => void;
        "onFamilyChange"?: (event: KritzelControlBrushConfigCustomEvent<string>) => void;
        "onSizeChange"?: (event: KritzelControlBrushConfigCustomEvent<number>) => void;
        "size"?: number;
        "type"?: string;
    }
    interface KritzelControlTextConfig {
        "activeControl"?: string;
        "color"?: string;
        "family"?: string;
        "isExpanded"?: boolean;
        "onColorChange"?: (event: KritzelControlTextConfigCustomEvent<string>) => void;
        "onFamilyChange"?: (event: KritzelControlTextConfigCustomEvent<string>) => void;
        "onSizeChange"?: (event: KritzelControlTextConfigCustomEvent<number>) => void;
        "size"?: number;
    }
    interface KritzelControls {
        "activeControl"?: string | null;
        "controls"?: KritzelToolbarControl[];
    }
    interface KritzelCursorTrail {
    }
    interface KritzelDropdown {
        "onValueChanged"?: (event: KritzelDropdownCustomEvent<string>) => void;
        "options"?: DropdownOption[];
        "selectStyles"?: any;
        "value"?: string;
        "width"?: string;
    }
    interface KritzelEditor {
        "controls"?: KritzelToolbarControl[];
        "customSvgIcons"?: Record<string, string>;
    }
    interface KritzelEngine {
        "activeTool"?: KritzelTool;
        "globalContextMenuItems"?: ContextMenuItem[];
        "objectContextMenuItems"?: ContextMenuItem[];
        "onActiveToolChange"?: (event: KritzelEngineCustomEvent<KritzelTool>) => void;
    }
    interface KritzelFont {
        "color"?: string;
        "fontFamily"?: string;
        "size"?: number;
    }
    interface KritzelFontFamily {
        "fontOptions"?: FontOption[];
        "onFontFamilyChange"?: (event: KritzelFontFamilyCustomEvent<string>) => void;
        "selectedFontFamily"?: string;
    }
    interface KritzelFontSize {
        "fontFamily"?: string;
        "onSizeChange"?: (event: KritzelFontSizeCustomEvent<number>) => void;
        "selectedSize"?: number | null;
        "sizes"?: number[];
    }
    interface KritzelIcon {
        "label"?: string;
        "name"?: string;
        "size"?: number;
    }
    interface KritzelStrokeSize {
        "onSizeChange"?: (event: KritzelStrokeSizeCustomEvent<number>) => void;
        "selectedSize"?: number | null;
        "sizes"?: number[];
    }
    interface IntrinsicElements {
        "kritzel-brush-style": KritzelBrushStyle;
        "kritzel-color": KritzelColor;
        "kritzel-color-palette": KritzelColorPalette;
        "kritzel-context-menu": KritzelContextMenu;
        "kritzel-control-brush-config": KritzelControlBrushConfig;
        "kritzel-control-text-config": KritzelControlTextConfig;
        "kritzel-controls": KritzelControls;
        "kritzel-cursor-trail": KritzelCursorTrail;
        "kritzel-dropdown": KritzelDropdown;
        "kritzel-editor": KritzelEditor;
        "kritzel-engine": KritzelEngine;
        "kritzel-font": KritzelFont;
        "kritzel-font-family": KritzelFontFamily;
        "kritzel-font-size": KritzelFontSize;
        "kritzel-icon": KritzelIcon;
        "kritzel-stroke-size": KritzelStrokeSize;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kritzel-brush-style": LocalJSX.KritzelBrushStyle & JSXBase.HTMLAttributes<HTMLKritzelBrushStyleElement>;
            "kritzel-color": LocalJSX.KritzelColor & JSXBase.HTMLAttributes<HTMLKritzelColorElement>;
            "kritzel-color-palette": LocalJSX.KritzelColorPalette & JSXBase.HTMLAttributes<HTMLKritzelColorPaletteElement>;
            "kritzel-context-menu": LocalJSX.KritzelContextMenu & JSXBase.HTMLAttributes<HTMLKritzelContextMenuElement>;
            "kritzel-control-brush-config": LocalJSX.KritzelControlBrushConfig & JSXBase.HTMLAttributes<HTMLKritzelControlBrushConfigElement>;
            "kritzel-control-text-config": LocalJSX.KritzelControlTextConfig & JSXBase.HTMLAttributes<HTMLKritzelControlTextConfigElement>;
            "kritzel-controls": LocalJSX.KritzelControls & JSXBase.HTMLAttributes<HTMLKritzelControlsElement>;
            "kritzel-cursor-trail": LocalJSX.KritzelCursorTrail & JSXBase.HTMLAttributes<HTMLKritzelCursorTrailElement>;
            "kritzel-dropdown": LocalJSX.KritzelDropdown & JSXBase.HTMLAttributes<HTMLKritzelDropdownElement>;
            "kritzel-editor": LocalJSX.KritzelEditor & JSXBase.HTMLAttributes<HTMLKritzelEditorElement>;
            "kritzel-engine": LocalJSX.KritzelEngine & JSXBase.HTMLAttributes<HTMLKritzelEngineElement>;
            "kritzel-font": LocalJSX.KritzelFont & JSXBase.HTMLAttributes<HTMLKritzelFontElement>;
            "kritzel-font-family": LocalJSX.KritzelFontFamily & JSXBase.HTMLAttributes<HTMLKritzelFontFamilyElement>;
            "kritzel-font-size": LocalJSX.KritzelFontSize & JSXBase.HTMLAttributes<HTMLKritzelFontSizeElement>;
            "kritzel-icon": LocalJSX.KritzelIcon & JSXBase.HTMLAttributes<HTMLKritzelIconElement>;
            "kritzel-stroke-size": LocalJSX.KritzelStrokeSize & JSXBase.HTMLAttributes<HTMLKritzelStrokeSizeElement>;
        }
    }
}
