/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { KritzelToolbarControl } from "./interfaces/toolbar-control.interface";
import { KritzelTool } from "./interfaces/tool.interface";
export { KritzelToolbarControl } from "./interfaces/toolbar-control.interface";
export { KritzelTool } from "./interfaces/tool.interface";
export namespace Components {
    interface KritzelColorPalette {
        "colors": string[];
        "selectedColor": string | null;
    }
    interface KritzelControls {
        "activeControl": string | null;
        "controls": KritzelToolbarControl[];
    }
    interface KritzelEditor {
    }
    interface KritzelEngine {
        "activeTool": KritzelTool;
        "changeActiveTool": (tool: string) => Promise<void>;
        "changeColor": (color: string) => Promise<void>;
        "registerTool": (toolName: string, toolClass: any) => Promise<boolean>;
    }
    interface KritzelIcon {
        "label"?: string;
        "name": keyof typeof this.icons;
    }
    interface KritzelStrokeSize {
        "selectedSize": number | null;
        "sizes": number[];
    }
}
export interface KritzelColorPaletteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKritzelColorPaletteElement;
}
export interface KritzelEngineCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKritzelEngineElement;
}
export interface KritzelStrokeSizeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKritzelStrokeSizeElement;
}
declare global {
    interface HTMLKritzelColorPaletteElementEventMap {
        "colorChange": string;
    }
    interface HTMLKritzelColorPaletteElement extends Components.KritzelColorPalette, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKritzelColorPaletteElementEventMap>(type: K, listener: (this: HTMLKritzelColorPaletteElement, ev: KritzelColorPaletteCustomEvent<HTMLKritzelColorPaletteElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKritzelColorPaletteElementEventMap>(type: K, listener: (this: HTMLKritzelColorPaletteElement, ev: KritzelColorPaletteCustomEvent<HTMLKritzelColorPaletteElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKritzelColorPaletteElement: {
        prototype: HTMLKritzelColorPaletteElement;
        new (): HTMLKritzelColorPaletteElement;
    };
    interface HTMLKritzelControlsElement extends Components.KritzelControls, HTMLStencilElement {
    }
    var HTMLKritzelControlsElement: {
        prototype: HTMLKritzelControlsElement;
        new (): HTMLKritzelControlsElement;
    };
    interface HTMLKritzelEditorElement extends Components.KritzelEditor, HTMLStencilElement {
    }
    var HTMLKritzelEditorElement: {
        prototype: HTMLKritzelEditorElement;
        new (): HTMLKritzelEditorElement;
    };
    interface HTMLKritzelEngineElementEventMap {
        "activeToolChange": KritzelTool;
    }
    interface HTMLKritzelEngineElement extends Components.KritzelEngine, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKritzelEngineElementEventMap>(type: K, listener: (this: HTMLKritzelEngineElement, ev: KritzelEngineCustomEvent<HTMLKritzelEngineElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKritzelEngineElementEventMap>(type: K, listener: (this: HTMLKritzelEngineElement, ev: KritzelEngineCustomEvent<HTMLKritzelEngineElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKritzelEngineElement: {
        prototype: HTMLKritzelEngineElement;
        new (): HTMLKritzelEngineElement;
    };
    interface HTMLKritzelIconElement extends Components.KritzelIcon, HTMLStencilElement {
    }
    var HTMLKritzelIconElement: {
        prototype: HTMLKritzelIconElement;
        new (): HTMLKritzelIconElement;
    };
    interface HTMLKritzelStrokeSizeElementEventMap {
        "sizeChange": number;
    }
    interface HTMLKritzelStrokeSizeElement extends Components.KritzelStrokeSize, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKritzelStrokeSizeElementEventMap>(type: K, listener: (this: HTMLKritzelStrokeSizeElement, ev: KritzelStrokeSizeCustomEvent<HTMLKritzelStrokeSizeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKritzelStrokeSizeElementEventMap>(type: K, listener: (this: HTMLKritzelStrokeSizeElement, ev: KritzelStrokeSizeCustomEvent<HTMLKritzelStrokeSizeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKritzelStrokeSizeElement: {
        prototype: HTMLKritzelStrokeSizeElement;
        new (): HTMLKritzelStrokeSizeElement;
    };
    interface HTMLElementTagNameMap {
        "kritzel-color-palette": HTMLKritzelColorPaletteElement;
        "kritzel-controls": HTMLKritzelControlsElement;
        "kritzel-editor": HTMLKritzelEditorElement;
        "kritzel-engine": HTMLKritzelEngineElement;
        "kritzel-icon": HTMLKritzelIconElement;
        "kritzel-stroke-size": HTMLKritzelStrokeSizeElement;
    }
}
declare namespace LocalJSX {
    interface KritzelColorPalette {
        "colors"?: string[];
        "onColorChange"?: (event: KritzelColorPaletteCustomEvent<string>) => void;
        "selectedColor"?: string | null;
    }
    interface KritzelControls {
        "activeControl"?: string | null;
        "controls"?: KritzelToolbarControl[];
    }
    interface KritzelEditor {
    }
    interface KritzelEngine {
        "activeTool"?: KritzelTool;
        "onActiveToolChange"?: (event: KritzelEngineCustomEvent<KritzelTool>) => void;
    }
    interface KritzelIcon {
        "label"?: string;
        "name"?: keyof typeof this.icons;
    }
    interface KritzelStrokeSize {
        "onSizeChange"?: (event: KritzelStrokeSizeCustomEvent<number>) => void;
        "selectedSize"?: number | null;
        "sizes"?: number[];
    }
    interface IntrinsicElements {
        "kritzel-color-palette": KritzelColorPalette;
        "kritzel-controls": KritzelControls;
        "kritzel-editor": KritzelEditor;
        "kritzel-engine": KritzelEngine;
        "kritzel-icon": KritzelIcon;
        "kritzel-stroke-size": KritzelStrokeSize;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kritzel-color-palette": LocalJSX.KritzelColorPalette & JSXBase.HTMLAttributes<HTMLKritzelColorPaletteElement>;
            "kritzel-controls": LocalJSX.KritzelControls & JSXBase.HTMLAttributes<HTMLKritzelControlsElement>;
            "kritzel-editor": LocalJSX.KritzelEditor & JSXBase.HTMLAttributes<HTMLKritzelEditorElement>;
            "kritzel-engine": LocalJSX.KritzelEngine & JSXBase.HTMLAttributes<HTMLKritzelEngineElement>;
            "kritzel-icon": LocalJSX.KritzelIcon & JSXBase.HTMLAttributes<HTMLKritzelIconElement>;
            "kritzel-stroke-size": LocalJSX.KritzelStrokeSize & JSXBase.HTMLAttributes<HTMLKritzelStrokeSizeElement>;
        }
    }
}
