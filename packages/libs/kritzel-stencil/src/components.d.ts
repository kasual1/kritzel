/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { KritzelTool } from "./interfaces/tool.interface";
export { KritzelTool } from "./interfaces/tool.interface";
export namespace Components {
    interface KritzelControls {
        "selectedControl": string | null;
    }
    interface KritzelEditor {
    }
    interface KritzelEngine {
        "activeTool": KritzelTool;
        "changeActiveTool": (tool: string) => Promise<void>;
    }
    interface KritzelIcon {
        "label"?: string;
        "name": keyof typeof this.icons;
    }
}
export interface KritzelEngineCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKritzelEngineElement;
}
declare global {
    interface HTMLKritzelControlsElement extends Components.KritzelControls, HTMLStencilElement {
    }
    var HTMLKritzelControlsElement: {
        prototype: HTMLKritzelControlsElement;
        new (): HTMLKritzelControlsElement;
    };
    interface HTMLKritzelEditorElement extends Components.KritzelEditor, HTMLStencilElement {
    }
    var HTMLKritzelEditorElement: {
        prototype: HTMLKritzelEditorElement;
        new (): HTMLKritzelEditorElement;
    };
    interface HTMLKritzelEngineElementEventMap {
        "activeToolChange": KritzelTool;
    }
    interface HTMLKritzelEngineElement extends Components.KritzelEngine, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKritzelEngineElementEventMap>(type: K, listener: (this: HTMLKritzelEngineElement, ev: KritzelEngineCustomEvent<HTMLKritzelEngineElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKritzelEngineElementEventMap>(type: K, listener: (this: HTMLKritzelEngineElement, ev: KritzelEngineCustomEvent<HTMLKritzelEngineElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKritzelEngineElement: {
        prototype: HTMLKritzelEngineElement;
        new (): HTMLKritzelEngineElement;
    };
    interface HTMLKritzelIconElement extends Components.KritzelIcon, HTMLStencilElement {
    }
    var HTMLKritzelIconElement: {
        prototype: HTMLKritzelIconElement;
        new (): HTMLKritzelIconElement;
    };
    interface HTMLElementTagNameMap {
        "kritzel-controls": HTMLKritzelControlsElement;
        "kritzel-editor": HTMLKritzelEditorElement;
        "kritzel-engine": HTMLKritzelEngineElement;
        "kritzel-icon": HTMLKritzelIconElement;
    }
}
declare namespace LocalJSX {
    interface KritzelControls {
        "selectedControl"?: string | null;
    }
    interface KritzelEditor {
    }
    interface KritzelEngine {
        "activeTool"?: KritzelTool;
        "onActiveToolChange"?: (event: KritzelEngineCustomEvent<KritzelTool>) => void;
    }
    interface KritzelIcon {
        "label"?: string;
        "name"?: keyof typeof this.icons;
    }
    interface IntrinsicElements {
        "kritzel-controls": KritzelControls;
        "kritzel-editor": KritzelEditor;
        "kritzel-engine": KritzelEngine;
        "kritzel-icon": KritzelIcon;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kritzel-controls": LocalJSX.KritzelControls & JSXBase.HTMLAttributes<HTMLKritzelControlsElement>;
            "kritzel-editor": LocalJSX.KritzelEditor & JSXBase.HTMLAttributes<HTMLKritzelEditorElement>;
            "kritzel-engine": LocalJSX.KritzelEngine & JSXBase.HTMLAttributes<HTMLKritzelEngineElement>;
            "kritzel-icon": LocalJSX.KritzelIcon & JSXBase.HTMLAttributes<HTMLKritzelIconElement>;
        }
    }
}
